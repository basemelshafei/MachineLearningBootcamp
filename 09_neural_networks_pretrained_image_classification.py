# -*- coding: utf-8 -*-
"""09 Neural Networks - Pretrained Image Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gI0AMJk4jLrJ3XZRN_UM-jIM0uWgvZ3h

# Imports
"""

import numpy as np
import pandas as pd
import keras
import tensorflow as tf

from keras.preprocessing.image import img_to_array, load_img
from keras.applications.inception_resnet_v2 import InceptionResNetV2, decode_predictions, preprocess_input

from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input as preprocess_input_vgg19
from keras.applications.vgg19 import decode_predictions as decode_vgg19

from IPython.core.display import display

"""#Constants

"""

FILE_1 = '01 Umbrella.jpg'
FILE_2 = '02 Couple.jpg'
FILE_3 = '03 Ocean.jpg'

"""# Pre-processing Images


"""

pic = load_img(FILE_1, target_size=(299, 299))

display(pic)

pic_array = img_to_array(pic)
pic_array.shape

expanded = np.expand_dims(pic_array, axis = 0)
expanded.shape
#The input of the model requires an array with this shape

preprocessed = preprocess_input(expanded)
#processing for the model

"""# Load InceptionResNet"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# inception_model = InceptionResNetV2(weights = 'imagenet')

inception_model.graph = tf.compat.v1.get_default_graph()

"""# Making Predictions

"""

prediction = inception_model.predict(preprocessed)
decode_predictions(prediction)

"""# Create a function that does all this:"""

def format_img_inceptionresnet( filename):
  pic = load_img(filename, target_size= (299, 299))
  pic_array = img_to_array(pic)
  expanded = np.expand_dims(pic_array, axis = 0)
  preprocessed = preprocess_input(expanded)
  prediction = inception_model.predict(preprocessed)
  a = decode_predictions(prediction)
  b = display(pic)

  return a, b
  

#Think how to print pic along with it

format_img_inceptionresnet(FILE_2)

vgg19_model = VGG19()

def abcd( File):
  pic = load_img(File, target_size= (224, 224))
  pic_array = img_to_array(pic)
  expanded = np.expand_dims(pic_array, axis = 0)
  preprocessed = preprocess_input_vgg19(expanded)
  prediction = vgg19_model.predict(preprocessed)
  a = decode_vgg19(prediction)
  b = display(pic)

  return a, b

abcd(FILE_3)

